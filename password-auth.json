{
  "name": "try-password-auth",
  "type": "registry:block",
  "dependencies": [
    "@auth/prisma-adapter",
    "@cgambrell/utils",
    "@mdx-js/loader",
    "@mdx-js/react",
    "@next/mdx",
    "@prisma/client",
    "@radix-ui/react-dialog",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "@radix-ui/react-tabs",
    "@radix-ui/react-tooltip",
    "@t3-oss/env-nextjs",
    "@tailwindcss/typography",
    "@tanstack/react-table",
    "@types/mdx",
    "bcryptjs",
    "next-auth",
    "use-debounce",
    "zod"
  ],
  "devDependencies": [
    "@faker-js/faker",
    "@types/bcryptjs",
    "prisma",
    "ts-node"
  ],
  "registryDependencies": [
    "button",
    "card",
    "dropdown-menu",
    "input",
    "label",
    "sheet",
    "table",
    "tabs",
    "tooltip"
  ],
  "files": [
    {
      "path": "./.eslintrc.json",
      "content": "{\n\t\"extends\": [\"next/core-web-vitals\", \"next/typescript\"],\n\t\"rules\": {\n\t\t\"@typescript-eslint/no-empty-object-type\": \"warn\"\n\t}\n}\n",
      "type": "registry:example",
      "target": "~/.eslintrc.json"
    },
    {
      "path": "./.gitignore",
      "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/install-state.gz\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# local env files\n.env*.local\n.env\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n",
      "type": "registry:example",
      "target": "~/.gitignore"
    },
    {
      "path": "./actions/auth.ts",
      "content": "'use server'\n\nimport { signIn, signOut } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { loginSchema, registerSchema, verifyEmailSchema } from '@/validators/auth'\nimport { getErrorRedirect, getSuccessRedirect, parseFormData } from '@cgambrell/utils'\nimport { Prisma } from '@prisma/client'\nimport bcrypt from 'bcryptjs'\nimport { AuthError } from 'next-auth'\nimport { redirect } from 'next/navigation'\n\nexport async function login(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, loginSchema)\n\tif (errors) return { errors }\n\n\ttry {\n\t\tawait signIn('credentials', { email: data.email, password: data.password, redirectTo: '/' })\n\t} catch (error) {\n\t\tif (error instanceof AuthError) redirect(getErrorRedirect('/login', error.cause?.err?.message))\n\t\tthrow error\n\t}\n}\n\nexport async function logout() {\n\tawait signOut({ redirectTo: '/login' })\n}\n\nexport async function register(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, registerSchema)\n\tif (errors) return { errors }\n\n\ttry {\n\t\tconst passwordHash = await bcrypt.hash(data.password, 10)\n\t\tawait prisma.user.create({ data: { name: `${data.firstName} ${data.lastName}`, email: data.email, passwordHash } })\n\t} catch (error) {\n\t\tif (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002')\n\t\t\treturn { errors: { email: ['User already exists with that email'] } }\n\t\telse if (error instanceof AuthError) redirect(getErrorRedirect('/register', error.cause?.err?.message))\n\t\tthrow error\n\t}\n\n\tredirect(getSuccessRedirect('/login', 'Account created, please login'))\n}\n\nexport async function verifyEmail(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, verifyEmailSchema)\n\tif (errors) return { errors }\n\n\ttry {\n\t\tawait signIn('resend', { email: data.email, redirect: false })\n\t} catch (error) {\n\t\tif (error instanceof AuthError) redirect(getErrorRedirect('/forgot', error.cause?.err?.message))\n\t\tthrow error\n\t}\n\n\tredirect(getSuccessRedirect('/login', 'A sign in link has been sent to your email address.'))\n}\n",
      "type": "registry:example",
      "target": "~/actions/auth.ts"
    },
    {
      "path": "./actions/user.ts",
      "content": "'use server'\n\nimport { auth } from '@/lib/auth'\nimport prisma from '@/lib/db'\nimport { updateNameSchema, updatePasswordSchema } from '@/validators/user'\nimport { getSuccessRedirect, parseFormData } from '@cgambrell/utils'\nimport bcrypt from 'bcryptjs'\nimport { redirect } from 'next/navigation'\n\nexport async function updateName(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, updateNameSchema)\n\tif (errors) return { errors }\n\n\tconst user = await auth()\n\tawait prisma.user.update({ where: { id: user.id }, data: { name: data.name } })\n\n\tredirect(getSuccessRedirect('/settings', 'User updated'))\n}\n\nexport async function updatePassword(_prevState: unknown, formData: FormData) {\n\tconst { data, errors } = parseFormData(formData, updatePasswordSchema)\n\tif (errors) return { errors }\n\n\tconst user = await auth()\n\tconst passwordHash = await bcrypt.hash(data.password, 10)\n\tawait prisma.user.update({ where: { id: user.id }, data: { passwordHash } })\n\n\tredirect(getSuccessRedirect('/settings/security', 'Password updated'))\n}\n",
      "type": "registry:example",
      "target": "~/actions/user.ts"
    },
    {
      "path": "./app/(auth)/forgot/client.tsx",
      "content": "'use client'\n\nimport { verifyEmail } from '@/actions/auth'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage() {\n\tconst [state, action] = useFormState(verifyEmail, null)\n\n\treturn (\n\t\t<form action={action} className='grid gap-4'>\n\t\t\t<FormInput label='Email address' name='email' placeholder='name@example.com' type='email' error={state?.errors.email} />\n\t\t\t<ActionButton>Send magic link</ActionButton>\n\t\t</form>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/forgot/client.tsx"
    },
    {
      "path": "./app/(auth)/forgot/page.tsx",
      "content": "import { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport Link from 'next/link'\nimport { ClientPage } from './client'\n\nexport default function ForgotPage() {\n\treturn (\n\t\t<>\n\t\t\t<Link className={cn(buttonVariants({ variant: 'ghost' }), 'absolute right-4 top-4 md:right-8 md:top-8')} href='/login'>\n\t\t\t\tLogin\n\t\t\t</Link>\n\t\t\t<div className='mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]'>\n\t\t\t\t<div className='flex flex-col space-y-2 text-center'>\n\t\t\t\t\t<h1 className='text-2xl font-semibold tracking-tight'>Forgot your password?</h1>\n\t\t\t\t\t<p className='text-sm text-muted-foreground'>Enter your email below to get a magic link.</p>\n\t\t\t\t</div>\n\t\t\t\t<ClientPage />\n\t\t\t</div>\n\t\t</>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/forgot/page.tsx"
    },
    {
      "path": "./app/(auth)/layout.tsx",
      "content": "import { MOCK_APP_ICON, MOCK_APP_NAME, MOCK_TESTIMONIAL, PLACEHOLDER_IMAGE } from '@/lib/constants'\nimport { LayoutProps } from '@cgambrell/utils'\nimport Image from 'next/image'\n\nexport default function AuthLayout({ children }: LayoutProps) {\n\treturn (\n\t\t<div className='relative flex-col items-center justify-center grid lg:max-w-none lg:h-screen lg:grid-cols-2 lg:px-0'>\n\t\t\t<div className='relative hidden h-full flex-col bg-muted p-10 text-white dark:border-r lg:flex'>\n\t\t\t\t<div className='absolute inset-0'>\n\t\t\t\t\t<Image className='w-full h-full object-cover' src={PLACEHOLDER_IMAGE} alt='auth-feature' width={1000} height={1000} />\n\t\t\t\t</div>\n\t\t\t\t<div className='relative z-20 flex items-center text-lg font-medium'>\n\t\t\t\t\t<MOCK_APP_ICON className='mr-2 h-6 w-6' />\n\t\t\t\t\t<span>{MOCK_APP_NAME}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className='relative z-20 mt-auto'>\n\t\t\t\t\t<blockquote className='space-y-2'>\n\t\t\t\t\t\t<p className='text-lg'>&ldquo;{MOCK_TESTIMONIAL.quote}&rdquo;</p>\n\t\t\t\t\t\t<footer className='text-sm'>{MOCK_TESTIMONIAL.name}</footer>\n\t\t\t\t\t</blockquote>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='px-4 pt-24 lg:p-8'>{children}</div>\n\t\t</div>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/layout.tsx"
    },
    {
      "path": "./app/(auth)/login/client.tsx",
      "content": "'use client'\n\nimport { login } from '@/actions/auth'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage() {\n\tconst [state, action] = useFormState(login, null)\n\n\treturn (\n\t\t<form action={action} className='grid gap-4'>\n\t\t\t<FormInput label='Email address' name='email' placeholder='name@example.com' type='email' error={state?.errors.email} />\n\t\t\t<FormInput label='Password' name='password' type='password' error={state?.errors.password} />\n\t\t\t<ActionButton>Sign in with email</ActionButton>\n\t\t</form>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/login/client.tsx"
    },
    {
      "path": "./app/(auth)/login/page.tsx",
      "content": "import { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport { Metadata } from 'next'\nimport Link from 'next/link'\nimport { ClientPage } from './client'\n\nexport const metadata: Metadata = {\n\ttitle: 'Login',\n\tdescription: 'Login to your account',\n}\n\nexport default function LoginPage() {\n\treturn (\n\t\t<>\n\t\t\t<Link className={cn(buttonVariants({ variant: 'ghost' }), 'absolute right-4 top-4 md:right-8 md:top-8')} href='/register'>\n\t\t\t\tRegister\n\t\t\t</Link>\n\t\t\t<div className='mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]'>\n\t\t\t\t<div className='flex flex-col space-y-2 text-center'>\n\t\t\t\t\t<h1 className='text-2xl font-semibold tracking-tight'>Sign in to your account</h1>\n\t\t\t\t\t<p className='text-sm text-muted-foreground'>Enter your email below to sign in to your account</p>\n\t\t\t\t</div>\n\t\t\t\t<ClientPage />\n\t\t\t\t<p className='px-8 text-center text-sm text-muted-foreground'>\n\t\t\t\t\tForgot your password?{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/forgot'>\n\t\t\t\t\t\tGet help\n\t\t\t\t\t</Link>\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t\t<p className='px-8 text-center text-sm text-muted-foreground'>\n\t\t\t\t\tBy clicking continue, you agree to our{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/terms'>\n\t\t\t\t\t\tTerms of Service\n\t\t\t\t\t</Link>{' '}\n\t\t\t\t\tand{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/privacy'>\n\t\t\t\t\t\tPrivacy Policy\n\t\t\t\t\t</Link>\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/login/page.tsx"
    },
    {
      "path": "./app/(auth)/register/client.tsx",
      "content": "'use client'\n\nimport { register } from '@/actions/auth'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage() {\n\tconst [state, action] = useFormState(register, null)\n\n\treturn (\n\t\t<form action={action} className='grid gap-y-4 gap-x-2 grid-cols-2'>\n\t\t\t<FormInput label='First name' name='firstName' placeholder='Max' error={state?.errors.firstName} />\n\t\t\t<FormInput label='Last name' name='lastName' placeholder='Robinson' error={state?.errors.lastName} />\n\t\t\t<FormInput\n\t\t\t\tclassName='col-span-full'\n\t\t\t\tlabel='Email address'\n\t\t\t\tname='email'\n\t\t\t\tplaceholder='name@example.com'\n\t\t\t\ttype='email'\n\t\t\t\terror={state?.errors.email}\n\t\t\t/>\n\t\t\t<FormInput label='Password' name='password' type='password' error={state?.errors.password} />\n\t\t\t<FormInput label='Confirm password' name='confirmPassword' type='password' error={state?.errors.confirmPassword} />\n\t\t\t<ActionButton className='col-span-full'>Create account with email</ActionButton>\n\t\t</form>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/register/client.tsx"
    },
    {
      "path": "./app/(auth)/register/page.tsx",
      "content": "import { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport { Metadata } from 'next'\nimport Link from 'next/link'\nimport { ClientPage } from './client'\n\nexport const metadata: Metadata = {\n\ttitle: 'Register',\n\tdescription: 'Create an account',\n}\n\nexport default function RegisterPage() {\n\treturn (\n\t\t<>\n\t\t\t<Link className={cn(buttonVariants({ variant: 'ghost' }), 'absolute right-4 top-4 md:right-8 md:top-8')} href='/login'>\n\t\t\t\tLogin\n\t\t\t</Link>\n\t\t\t<div className='mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]'>\n\t\t\t\t<div className='flex flex-col space-y-2 text-center'>\n\t\t\t\t\t<h1 className='text-2xl font-semibold tracking-tight'>Create an account</h1>\n\t\t\t\t\t<p className='text-sm text-muted-foreground'>Enter your email below to create your account</p>\n\t\t\t\t</div>\n\t\t\t\t<ClientPage />\n\t\t\t\t<p className='px-8 text-center text-sm text-muted-foreground'>\n\t\t\t\t\tBy clicking continue, you agree to our{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/terms'>\n\t\t\t\t\t\tTerms of Service\n\t\t\t\t\t</Link>{' '}\n\t\t\t\t\tand{' '}\n\t\t\t\t\t<Link className='underline underline-offset-4 hover:text-primary' href='/privacy'>\n\t\t\t\t\t\tPrivacy Policy\n\t\t\t\t\t</Link>\n\t\t\t\t\t.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(auth)/register/page.tsx"
    },
    {
      "path": "./app/(protected)/(root)/columns.tsx",
      "content": "'use client'\n\nimport { DataTableColumnHeader } from '@/components/data-table/column-header'\nimport { PLACEHOLDER_IMAGE } from '@/lib/constants'\nimport { User } from '@prisma/client'\nimport { ColumnDef } from '@tanstack/react-table'\nimport Image from 'next/image'\n\nexport const columns: ColumnDef<User>[] = [\n\t{\n\t\taccessorKey: 'image',\n\t\theader: () => <span className='sr-only'>Image</span>,\n\t\tcell: ({ getValue }) => (\n\t\t\t<Image\n\t\t\t\tclassName='aspect-square rounded-md object-cover'\n\t\t\t\tsrc={getValue<User['image']>() ?? PLACEHOLDER_IMAGE}\n\t\t\t\talt='Product image'\n\t\t\t\theight='64'\n\t\t\t\twidth='64'\n\t\t\t/>\n\t\t),\n\t\tmeta: { className: 'hidden sm:table-cell w-[100px]' },\n\t},\n\t{\n\t\taccessorKey: 'name',\n\t\theader: ({ column }) => <DataTableColumnHeader column={column} title='Name' />,\n\t\tcell: ({ getValue }) => <span className='font-medium'>{getValue<User['name']>()}</span>,\n\t},\n\t{\n\t\taccessorKey: 'email',\n\t\theader: ({ column }) => <DataTableColumnHeader column={column} title='Email address' />,\n\t\tmeta: { className: 'hidden md:table-cell' },\n\t},\n\t{\n\t\taccessorKey: 'createdAt',\n\t\theader: ({ column }) => <DataTableColumnHeader column={column} title='Created at' />,\n\t\tcell: ({ getValue }) => getValue<User['createdAt']>().toLocaleString(),\n\t},\n]\n",
      "type": "registry:example",
      "target": "./app/(protected)/(root)/columns.tsx"
    },
    {
      "path": "./app/(protected)/(root)/page.tsx",
      "content": "import { DataTable } from '@/components/data-table'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport prisma from '@/lib/db'\nimport { getSearchParam, ServerProps } from '@cgambrell/utils'\nimport { FileIcon, ListFilterIcon, PlusCircleIcon } from 'lucide-react'\nimport { Metadata } from 'next'\nimport { columns } from './columns'\n\nexport const metadata: Metadata = {\n\ttitle: 'Users',\n\tdescription: 'Manage your users and view their linked accounts.',\n}\n\nexport default async function RootPage({ searchParams }: ServerProps) {\n\tconst q = getSearchParam(searchParams, 'q') ?? ''\n\tconst users = await prisma.user.findMany({\n\t\twhere: { OR: [{ email: { contains: q, mode: 'insensitive' } }, { name: { contains: q, mode: 'insensitive' } }] },\n\t\tinclude: { accounts: true },\n\t})\n\n\treturn (\n\t\t<div className='grid items-start gap-4 md:gap-8'>\n\t\t\t<Tabs defaultValue='all'>\n\t\t\t\t<div className='flex items-center'>\n\t\t\t\t\t<TabsList>\n\t\t\t\t\t\t<TabsTrigger value='all'>All</TabsTrigger>\n\t\t\t\t\t\t<TabsTrigger value='active'>Active</TabsTrigger>\n\t\t\t\t\t\t<TabsTrigger value='draft'>Draft</TabsTrigger>\n\t\t\t\t\t\t<TabsTrigger value='archived' className='hidden sm:flex'>\n\t\t\t\t\t\t\tArchived\n\t\t\t\t\t\t</TabsTrigger>\n\t\t\t\t\t</TabsList>\n\t\t\t\t\t<div className='ml-auto flex items-center gap-2'>\n\t\t\t\t\t\t<Button variant='outline' size='sm' className='h-7 gap-1'>\n\t\t\t\t\t\t\t<ListFilterIcon className='h-3.5 w-3.5' />\n\t\t\t\t\t\t\t<span className='sr-only sm:not-sr-only sm:whitespace-nowrap'>Filter</span>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button size='sm' variant='outline' className='h-7 gap-1'>\n\t\t\t\t\t\t\t<FileIcon className='h-3.5 w-3.5' />\n\t\t\t\t\t\t\t<span className='sr-only sm:not-sr-only sm:whitespace-nowrap'>Export</span>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button size='sm' className='h-7 gap-1'>\n\t\t\t\t\t\t\t<PlusCircleIcon className='h-3.5 w-3.5' />\n\t\t\t\t\t\t\t<span className='sr-only sm:not-sr-only sm:whitespace-nowrap'>Add Product</span>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<TabsContent value='all'>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t\t<CardTitle>Users</CardTitle>\n\t\t\t\t\t\t\t<CardDescription>Manage your users and view their linked accounts.</CardDescription>\n\t\t\t\t\t\t</CardHeader>\n\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t<DataTable columns={columns} data={users} defaultState={{ sorting: [{ id: 'createdAt', desc: true }] }} />\n\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t</Card>\n\t\t\t\t</TabsContent>\n\t\t\t</Tabs>\n\t\t</div>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/(root)/page.tsx"
    },
    {
      "path": "./app/(protected)/components/mobile-nav.tsx",
      "content": "'use client'\n\nimport { Button } from '@/components/ui/button'\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet'\nimport { MOCK_APP_ICON, MOCK_APP_NAME, MOCK_NAV_LINKS } from '@/lib/constants'\nimport { PanelLeftIcon } from 'lucide-react'\nimport Link from 'next/link'\nimport { MobileNavItem } from './nav-item'\n\nexport function MobileNav() {\n\treturn (\n\t\t<Sheet>\n\t\t\t<SheetTrigger asChild>\n\t\t\t\t<Button size='icon' variant='outline' className='sm:hidden'>\n\t\t\t\t\t<PanelLeftIcon className='h-5 w-5' />\n\t\t\t\t\t<span className='sr-only'>Toggle Menu</span>\n\t\t\t\t</Button>\n\t\t\t</SheetTrigger>\n\t\t\t<SheetContent side='left' className='sm:max-w-xs'>\n\t\t\t\t<nav className='grid gap-6 text-lg font-medium'>\n\t\t\t\t\t<Link\n\t\t\t\t\t\thref='/'\n\t\t\t\t\t\tclassName='group flex h-10 w-10 shrink-0 items-center justify-center gap-2 rounded-full bg-primary text-lg font-semibold text-primary-foreground md:text-base'>\n\t\t\t\t\t\t<MOCK_APP_ICON className='h-5 w-5 transition-all group-hover:scale-110' />\n\t\t\t\t\t\t<span className='sr-only'>{MOCK_APP_NAME}</span>\n\t\t\t\t\t</Link>\n\t\t\t\t\t{MOCK_NAV_LINKS.flat().map((link) => (\n\t\t\t\t\t\t<MobileNavItem key={link.href} {...link} />\n\t\t\t\t\t))}\n\t\t\t\t</nav>\n\t\t\t</SheetContent>\n\t\t</Sheet>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/components/mobile-nav.tsx"
    },
    {
      "path": "./app/(protected)/components/nav-item.tsx",
      "content": "'use client'\n\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'\nimport { MOCK_NAV_LINKS } from '@/lib/constants'\nimport { cn } from '@/lib/utils'\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { useMemo } from 'react'\n\nexport function NavItem({ exact = false, href, icon: Icon, label }: (typeof MOCK_NAV_LINKS)[number][number]) {\n\tconst pathname = usePathname()\n\tconst isActive = useMemo(() => (exact ? pathname === href : pathname.startsWith(href)), [exact, href, pathname])\n\n\treturn (\n\t\t<TooltipProvider>\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Link\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t'flex h-9 w-9 items-center justify-center rounded-lg transition-colors hover:text-foreground md:h-8 md:w-8',\n\t\t\t\t\t\t\tisActive ? 'bg-accent text-accent-foreground' : 'text-muted-foreground'\n\t\t\t\t\t\t)}\n\t\t\t\t\t\thref={href}>\n\t\t\t\t\t\t<Icon className='h-5 w-5' />\n\t\t\t\t\t\t<span className='sr-only'>{label}</span>\n\t\t\t\t\t</Link>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent side='right'>{label}</TooltipContent>\n\t\t\t</Tooltip>\n\t\t</TooltipProvider>\n\t)\n}\n\nexport function MobileNavItem({ exact = false, href, icon: Icon, label }: (typeof MOCK_NAV_LINKS)[number][number]) {\n\tconst pathname = usePathname()\n\tconst isActive = useMemo(() => (exact ? pathname === href : pathname.startsWith(href)), [exact, href, pathname])\n\n\treturn (\n\t\t<Link\n\t\t\tclassName={cn('flex items-center gap-4 px-2.5', isActive ? 'text-foreground' : 'text-muted-foreground hover:text-foreground')}\n\t\t\thref={href}>\n\t\t\t<Icon className='h-5 w-5' />\n\t\t\t{label}\n\t\t</Link>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/components/nav-item.tsx"
    },
    {
      "path": "./app/(protected)/components/search.tsx",
      "content": "'use client'\n\nimport { Input } from '@/components/ui/input'\nimport { SearchIcon } from 'lucide-react'\nimport { useRouter } from 'next/navigation'\nimport { useState } from 'react'\nimport { useDebouncedCallback } from 'use-debounce'\n\nexport function Search() {\n\tconst router = useRouter()\n\tconst [value, setValue] = useState('')\n\n\tconst debounced = useDebouncedCallback((value) => {\n\t\trouter.push(`?q=${value}`)\n\t}, 500)\n\n\treturn (\n\t\t<div className='relative ml-auto flex-1 md:grow-0'>\n\t\t\t<SearchIcon className='absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground' />\n\t\t\t<Input\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='Search...'\n\t\t\t\tclassName='w-full rounded-lg bg-background pl-8 md:w-[200px] lg:w-[320px]'\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\tsetValue(e.target.value)\n\t\t\t\t\tdebounced(e.target.value)\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/components/search.tsx"
    },
    {
      "path": "./app/(protected)/components/side-nav.tsx",
      "content": "'use client'\n\nimport { MOCK_APP_ICON, MOCK_APP_NAME, MOCK_NAV_LINKS } from '@/lib/constants'\nimport Link from 'next/link'\nimport { NavItem } from './nav-item'\n\nexport function SideNav() {\n\treturn (\n\t\t<aside className='fixed inset-y-0 left-0 z-10 hidden w-14 flex-col border-r bg-background sm:flex'>\n\t\t\t<nav className='flex flex-col items-center gap-4 px-2 py-4'>\n\t\t\t\t<Link\n\t\t\t\t\thref='/'\n\t\t\t\t\tclassName='group flex h-9 w-9 shrink-0 items-center justify-center gap-2 rounded-full bg-primary text-lg font-semibold text-primary-foreground md:h-8 md:w-8 md:text-base'>\n\t\t\t\t\t<MOCK_APP_ICON className='h-4 w-4 transition-all group-hover:scale-110' />\n\t\t\t\t\t<span className='sr-only'>{MOCK_APP_NAME}</span>\n\t\t\t\t</Link>\n\t\t\t\t{MOCK_NAV_LINKS[0].map((link) => (\n\t\t\t\t\t<NavItem key={link.href} {...link} />\n\t\t\t\t))}\n\t\t\t</nav>\n\t\t\t<nav className='mt-auto flex flex-col items-center gap-4 px-2 py-4'>\n\t\t\t\t{MOCK_NAV_LINKS[1].map((link) => (\n\t\t\t\t\t<NavItem key={link.href} {...link} />\n\t\t\t\t))}\n\t\t\t</nav>\n\t\t</aside>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/components/side-nav.tsx"
    },
    {
      "path": "./app/(protected)/components/user-menu.tsx",
      "content": "import { logout } from '@/actions/auth'\nimport { Button } from '@/components/ui/button'\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuItem,\n\tDropdownMenuLabel,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { User2Icon } from 'lucide-react'\nimport Link from 'next/link'\n\nexport function UserMenu() {\n\treturn (\n\t\t<DropdownMenu>\n\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t<Button variant='outline' size='icon' className='overflow-hidden rounded-full'>\n\t\t\t\t\t<User2Icon className='size-4' />\n\t\t\t\t</Button>\n\t\t\t</DropdownMenuTrigger>\n\t\t\t<DropdownMenuContent align='end'>\n\t\t\t\t<DropdownMenuLabel>My Account</DropdownMenuLabel>\n\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t<Link href='/settings'>\n\t\t\t\t\t<DropdownMenuItem>Settings</DropdownMenuItem>\n\t\t\t\t</Link>\n\t\t\t\t<Link href='/plans'>\n\t\t\t\t\t<DropdownMenuItem>Plans</DropdownMenuItem>\n\t\t\t\t</Link>\n\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t<DropdownMenuItem asChild>\n\t\t\t\t\t<form action={logout}>\n\t\t\t\t\t\t<button className='w-full text-left' type='submit'>\n\t\t\t\t\t\t\tLogout\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t</DropdownMenuItem>\n\t\t\t</DropdownMenuContent>\n\t\t</DropdownMenu>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/components/user-menu.tsx"
    },
    {
      "path": "./app/(protected)/layout.tsx",
      "content": "import { auth } from '@/lib/auth'\nimport { LayoutProps } from '@cgambrell/utils'\nimport { MobileNav } from './components/mobile-nav'\nimport { Search } from './components/search'\nimport { SideNav } from './components/side-nav'\nimport { UserMenu } from './components/user-menu'\n\nexport default async function ProtectedLayout({ children }: LayoutProps) {\n\tawait auth()\n\n\treturn (\n\t\t<div className='flex min-h-screen w-full flex-col bg-muted/40'>\n\t\t\t<SideNav />\n\t\t\t<div className='flex flex-col sm:gap-4 sm:py-4 sm:pl-14'>\n\t\t\t\t<header className='sticky top-0 z-30 flex h-14 items-center gap-4 border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6'>\n\t\t\t\t\t<MobileNav />\n\t\t\t\t\t<Search />\n\t\t\t\t\t<UserMenu />\n\t\t\t\t</header>\n\t\t\t\t<main className='flex-1 p-4 sm:px-6 sm:py-0'>{children}</main>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/layout.tsx"
    },
    {
      "path": "./app/(protected)/settings/(general)/client.tsx",
      "content": "'use client'\n\nimport { updateName } from '@/actions/user'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\nimport { AuthUser } from '@/lib/utils'\nimport { useFormState } from 'react-dom'\n\nexport function ClientPage({ user }: { user: AuthUser }) {\n\tconst [state, action] = useFormState(updateName, null)\n\n\treturn (\n\t\t<div className='grid gap-6'>\n\t\t\t<form action={action}>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t<CardTitle>Your name</CardTitle>\n\t\t\t\t\t\t<CardDescription>The name you use to identify yourself.</CardDescription>\n\t\t\t\t\t</CardHeader>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<FormInput name='name' placeholder={user.name ?? ''} defaultValue={user.name ?? ''} error={state?.errors?.name} />\n\t\t\t\t\t</CardContent>\n\t\t\t\t\t<CardFooter className='border-t px-6 py-4'>\n\t\t\t\t\t\t<ActionButton>Save</ActionButton>\n\t\t\t\t\t</CardFooter>\n\t\t\t\t</Card>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/settings/(general)/client.tsx"
    },
    {
      "path": "./app/(protected)/settings/(general)/page.tsx",
      "content": "import { auth } from '@/lib/auth'\nimport { ClientPage } from './client'\n\nexport default async function SettingsPage() {\n\tconst user = await auth()\n\treturn <ClientPage user={user} />\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/settings/(general)/page.tsx"
    },
    {
      "path": "./app/(protected)/settings/components/settings-link.tsx",
      "content": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { useMemo } from 'react'\n\nexport function SettingsLink({ exact = false, href, label }: { exact?: boolean; href: string; label: string }) {\n\tconst pathname = usePathname()\n\tconst isActive = useMemo(() => (exact ? pathname === href : pathname.startsWith(href)), [exact, href, pathname])\n\n\treturn (\n\t\t<Link href={href} className={cn(isActive && 'font-semibold text-primary')}>\n\t\t\t{label}\n\t\t</Link>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/settings/components/settings-link.tsx"
    },
    {
      "path": "./app/(protected)/settings/layout.tsx",
      "content": "import { LayoutProps } from '@cgambrell/utils'\nimport { SettingsLink } from './components/settings-link'\n\nconst links = [\n\t{ href: '/settings', exact: true, label: 'General' },\n\t{ href: '/settings/security', label: 'Security' },\n]\n\nexport default function SettingLayout({ children }: LayoutProps) {\n\treturn (\n\t\t<div className='flex flex-col gap-4 md:gap-8'>\n\t\t\t<div className='mx-auto grid w-full max-w-6xl gap-2'>\n\t\t\t\t<h1 className='text-3xl font-semibold'>Settings</h1>\n\t\t\t</div>\n\t\t\t<div className='mx-auto grid w-full max-w-6xl items-start gap-6 md:grid-cols-[180px_1fr] lg:grid-cols-[250px_1fr]'>\n\t\t\t\t<nav className='grid gap-4 text-sm text-muted-foreground'>\n\t\t\t\t\t{links.map((link) => (\n\t\t\t\t\t\t<SettingsLink key={link.href} {...link} />\n\t\t\t\t\t))}\n\t\t\t\t</nav>\n\t\t\t\t<main>{children}</main>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/settings/layout.tsx"
    },
    {
      "path": "./app/(protected)/settings/security/page.tsx",
      "content": "'use client'\n\nimport { updatePassword } from '@/actions/user'\nimport { ActionButton } from '@/components/action-button'\nimport { FormInput } from '@/components/form-input'\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\nimport { useEffect, useRef } from 'react'\nimport { useFormState } from 'react-dom'\n\nexport default function SecurityPage() {\n\tconst ref = useRef<HTMLFormElement>(null)\n\tconst [state, action] = useFormState(updatePassword, null)\n\n\tuseEffect(() => {\n\t\tif (state === undefined) ref.current?.reset()\n\t}, [state])\n\n\treturn (\n\t\t<div className='grid gap-6'>\n\t\t\t<form action={action} ref={ref}>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t<CardTitle>Your password</CardTitle>\n\t\t\t\t\t\t<CardDescription>Your credentials for logging in.</CardDescription>\n\t\t\t\t\t</CardHeader>\n\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t<div className='grid gap-2'>\n\t\t\t\t\t\t\t<FormInput name='password' placeholder='New password' type='password' error={state?.errors?.password} />\n\t\t\t\t\t\t\t<FormInput\n\t\t\t\t\t\t\t\tname='confirmPassword'\n\t\t\t\t\t\t\t\tplaceholder='Confirm password'\n\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\terror={state?.errors?.confirmPassword}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</CardContent>\n\t\t\t\t\t<CardFooter className='border-t px-6 py-4'>\n\t\t\t\t\t\t<ActionButton>Save</ActionButton>\n\t\t\t\t\t</CardFooter>\n\t\t\t\t</Card>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(protected)/settings/security/page.tsx"
    },
    {
      "path": "./app/(terms)/layout.tsx",
      "content": "import { MOCK_APP_ICON, MOCK_APP_NAME } from '@/lib/constants'\nimport { LayoutProps } from '@cgambrell/utils'\nimport Link from 'next/link'\n\nexport default function TermsLayout({ children }: LayoutProps) {\n\treturn (\n\t\t<div className='mx-auto max-w-screen-md px-4 py-12 prose prose-sm'>\n\t\t\t<Link className='flex items-center text-xl font-medium mb-8' href='/'>\n\t\t\t\t<MOCK_APP_ICON className='mr-2 h-6 w-6' />\n\t\t\t\t<span>{MOCK_APP_NAME}</span>\n\t\t\t</Link>\n\t\t\t<div>{children}</div>\n\t\t</div>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/(terms)/layout.tsx"
    },
    {
      "path": "./app/(terms)/privacy/page.mdx",
      "content": "import { MOCK_APP_NAME, MOCK_TERMS } from '@/lib/constants'\n\n**Privacy Notice**\n\n_Last Updated: 2024-10-10_\n\n---\n\n**1. Introduction**\n\nWelcome to {MOCK_APP_NAME} (\"we,\" \"us,\" or \"our\"). This Privacy Notice describes how we collect, use, disclose, and safeguard your personal information when you use our services, including our website and any related applications (collectively, the \"Service\").\n\n**2. Information We Collect**\n\n-   **Personal Data:** We may collect personally identifiable information such as your name, email address, phone number, and mailing address when you register for an account, subscribe to a newsletter, or fill out a form.\n\n-   **Usage Data:** We collect information on how you access and use the Service (\"Usage Data\"). This may include your IP address, browser type, pages visited, time and date of visit, and other diagnostic data.\n\n-   **Cookies and Tracking Technologies:** We use cookies, web beacons, and similar tracking technologies to track the activity on our Service and hold certain information.\n\n**3. How We Use Your Information**\n\nWe use the collected data for various purposes:\n\n-   **To Provide and Maintain the Service:** Ensuring the Service functions correctly and providing customer support.\n\n-   **To Notify You of Changes:** Informing you about updates or changes to our Service.\n\n-   **To Allow Participation in Interactive Features:** Enabling you to participate in interactive features when you choose to do so.\n\n-   **To Monitor Usage:** Tracking and analyzing usage and trends to improve user experience.\n\n-   **To Communicate with You:** Sending newsletters, marketing materials, and other information that may be of interest to you.\n\n**4. Disclosure of Your Information**\n\n-   **Business Transactions:** If we are involved in a merger, acquisition, or asset sale, your personal data may be transferred.\n\n-   **Legal Requirements:** We may disclose your information if required to do so by law or in response to valid requests by public authorities.\n\n-   **Third-Party Service Providers:** We may employ third-party companies to facilitate our Service, perform Service-related services, or assist us in analyzing how our Service is used.\n\n**5. Security of Your Information**\n\nWe value your trust in providing us your personal information and strive to use commercially acceptable means of protecting it. However, no method of transmission over the internet or electronic storage is 100% secure.\n\n**6. Your Rights**\n\nDepending on your jurisdiction, you may have the following data protection rights:\n\n-   **Access:** Request access to the personal data we hold about you.\n\n-   **Correction:** Request correction of any inaccurate or incomplete data.\n\n-   **Deletion:** Request deletion of your personal data under certain circumstances.\n\n-   **Opt-Out:** Opt-out of receiving marketing communications from us.\n\n**7. Children's Privacy**\n\nOur Service is not intended for individuals under the age of {MOCK_TERMS.minimumAge}. We do not knowingly collect personally identifiable information from anyone under this age.\n\n**8. International Data Transfers**\n\nYour information, including personal data, may be transferred to—and maintained on—computers located outside of your state, province, country, or other governmental jurisdiction where data protection laws may differ.\n\n**9. Changes to This Privacy Notice**\n\nWe may update our Privacy Notice from time to time. Any changes will be posted on this page with an updated \"Last Updated\" date.\n\n**10. Contact Us**\n\nIf you have any questions or concerns about this Privacy Notice, please contact us at:\n\n-   **Email:** {MOCK_TERMS.email}\n-   **Mailing Address:** {MOCK_TERMS.mailingAddress}\n-   **Phone Number:** {MOCK_TERMS.phone}\n\n---\n\n_Please customize this Privacy Notice to suit your specific needs and consult with a legal professional to ensure compliance with all applicable laws and regulations._\n",
      "type": "registry:example",
      "target": "./app/(terms)/privacy/page.mdx"
    },
    {
      "path": "./app/(terms)/terms/page.mdx",
      "content": "import { MOCK_APP_NAME, MOCK_TERMS } from '@/lib/constants'\n\n**Terms of Service**\n\n_Last Updated: 2024-10-10_\n\n**1. Acceptance of Terms**\n\nBy accessing or using our services, you agree to be bound by these Terms of Service (\"Terms\"). If you do not agree to all the terms and conditions, then you may not access the service.\n\n**2. Modification of Terms**\n\nWe reserve the right to modify or replace these Terms at any time. It is your responsibility to check this page periodically for changes. Your continued use of the service after any such changes constitutes acceptance of those changes.\n\n**3. Eligibility**\n\nYou must be at least {MOCK_TERMS.minimumAge} years old to use our services. By using the service, you represent and warrant that you meet this eligibility requirement.\n\n**4. User Accounts**\n\n-   **Account Responsibility:** You are responsible for maintaining the confidentiality of your account and password.\n-   **Account Security:** You agree to notify us immediately of any unauthorized use of your account.\n\n**5. Use of the Service**\n\n-   **Prohibited Activities:** You agree not to engage in any activities that violate any applicable laws or regulations.\n-   **User Content:** You retain ownership of any content you submit but grant us a license to use, display, and distribute such content.\n\n**6. Intellectual Property**\n\nAll content and materials on the service are the property of {MOCK_APP_NAME} or its licensors and are protected by intellectual property laws.\n\n**7. Third-Party Links**\n\nOur service may contain links to third-party websites or services that are not owned or controlled by us. We assume no responsibility for the content or practices of any third-party sites.\n\n**8. Termination**\n\nWe may terminate or suspend your account immediately, without prior notice, for any reason whatsoever, including but not limited to a breach of the Terms.\n\n**9. Limitation of Liability**\n\nIn no event shall {MOCK_APP_NAME}, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect or consequential damages arising out of your use of the service.\n\n**10. Indemnification**\n\nYou agree to defend, indemnify, and hold harmless {MOCK_APP_NAME} and its affiliates from any claims, damages, or demands arising out of your use of the service.\n\n**11. Governing Law**\n\nThese Terms shall be governed and construed in accordance with the laws of {MOCK_TERMS.jurisdiction}, without regard to its conflict of law provisions.\n\n**12. Dispute Resolution**\n\nAny disputes arising out of these Terms shall be resolved through {MOCK_TERMS.arbitration} in {MOCK_TERMS.jurisdiction}.\n\n**13. Severability**\n\nIf any provision of these Terms is held to be unenforceable, the remaining provisions shall remain in effect.\n\n**14. Entire Agreement**\n\nThese Terms constitute the entire agreement between us regarding our service and supersede any prior agreements.\n\n**15. Contact Us**\n\nIf you have any questions about these Terms, please contact us at {MOCK_TERMS.email}.\n\n---\n\n_Please customize these Terms of Service to suit your specific needs and consult with a legal professional to ensure compliance with all applicable laws and regulations._\n",
      "type": "registry:example",
      "target": "./app/(terms)/terms/page.mdx"
    },
    {
      "path": "./app/api/auth/[...nextauth]/route.ts",
      "content": "import { handlers } from '@/lib/auth'\nexport const { GET, POST } = handlers\n",
      "type": "registry:example",
      "target": "./app/api/auth/[...nextauth]/route.ts"
    },
    {
      "path": "./app/layout.tsx",
      "content": "import { GlobalToaster } from '@/components/global-toaster'\nimport { MOCK_APP_DESC, MOCK_APP_NAME } from '@/lib/constants'\nimport type { Metadata } from 'next'\nimport localFont from 'next/font/local'\nimport { Suspense } from 'react'\nimport './globals.css'\n\n// Import to verify environment variables are set\nimport '@/lib/env'\n\nconst geistSans = localFont({\n\tsrc: './fonts/GeistVF.woff',\n\tvariable: '--font-geist-sans',\n\tweight: '100 900',\n})\nconst geistMono = localFont({\n\tsrc: './fonts/GeistMonoVF.woff',\n\tvariable: '--font-geist-mono',\n\tweight: '100 900',\n})\n\nexport const metadata: Metadata = {\n\ttitle: MOCK_APP_NAME,\n\tdescription: MOCK_APP_DESC,\n}\n\nexport default function RootLayout({\n\tchildren,\n}: Readonly<{\n\tchildren: React.ReactNode\n}>) {\n\treturn (\n\t\t<html lang='en'>\n\t\t\t<body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n\t\t\t\t{children}\n\t\t\t\t<Suspense>\n\t\t\t\t\t<GlobalToaster />\n\t\t\t\t</Suspense>\n\t\t\t</body>\n\t\t</html>\n\t)\n}\n",
      "type": "registry:example",
      "target": "./app/layout.tsx"
    },
    {
      "path": "./components/action-button.tsx",
      "content": "'use client'\n\nimport { Loader2Icon } from 'lucide-react'\nimport { useFormStatus } from 'react-dom'\nimport { cn } from '../lib/utils'\nimport { Button, ButtonProps } from './ui/button'\n\nexport function ActionButton({ children, className, disabled, loading, ...props }: ButtonProps & { loading?: boolean }) {\n\tconst { pending } = useFormStatus()\n\n\treturn (\n\t\t<Button className={cn('relative', className)} disabled={disabled || loading || pending} type='submit' {...props}>\n\t\t\t<span className={cn('flex items-center', { invisible: loading || pending })}>{children}</span>\n\t\t\t{(loading || pending) && (\n\t\t\t\t<div className='absolute m-auto'>\n\t\t\t\t\t<Loader2Icon className='size-5 animate-spin' />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Button>\n\t)\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/data-table/column-header.tsx",
      "content": "import { Button } from '@/components/ui/button'\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuItem,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { cn } from '@/lib/utils'\nimport { ArrowDownIcon, ArrowUpIcon, CaretSortIcon, EyeNoneIcon } from '@radix-ui/react-icons'\nimport { Column } from '@tanstack/react-table'\n\ninterface DataTableColumnHeaderProps<TData, TValue> extends React.HTMLAttributes<HTMLDivElement> {\n\tcolumn: Column<TData, TValue>\n\ttitle: string\n}\n\nexport function DataTableColumnHeader<TData, TValue>({ column, title, className }: DataTableColumnHeaderProps<TData, TValue>) {\n\tif (!column.getCanSort()) {\n\t\treturn <div className={cn(className)}>{title}</div>\n\t}\n\n\treturn (\n\t\t<div className={cn('flex items-center space-x-2', className)}>\n\t\t\t<DropdownMenu>\n\t\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t\t<Button variant='ghost' size='sm' className='-ml-3 h-8 data-[state=open]:bg-accent'>\n\t\t\t\t\t\t<span>{title}</span>\n\t\t\t\t\t\t{column.getIsSorted() === 'desc' ? (\n\t\t\t\t\t\t\t<ArrowDownIcon className='ml-2 h-4 w-4' />\n\t\t\t\t\t\t) : column.getIsSorted() === 'asc' ? (\n\t\t\t\t\t\t\t<ArrowUpIcon className='ml-2 h-4 w-4' />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<CaretSortIcon className='ml-2 h-4 w-4' />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Button>\n\t\t\t\t</DropdownMenuTrigger>\n\t\t\t\t<DropdownMenuContent align='start'>\n\t\t\t\t\t<DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n\t\t\t\t\t\t<ArrowUpIcon className='mr-2 h-3.5 w-3.5 text-muted-foreground/70' />\n\t\t\t\t\t\tAsc\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n\t\t\t\t\t\t<ArrowDownIcon className='mr-2 h-3.5 w-3.5 text-muted-foreground/70' />\n\t\t\t\t\t\tDesc\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t<DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n\t\t\t\t\t\t<EyeNoneIcon className='mr-2 h-3.5 w-3.5 text-muted-foreground/70' />\n\t\t\t\t\t\tHide\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t</DropdownMenuContent>\n\t\t\t</DropdownMenu>\n\t\t</div>\n\t)\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/data-table.tsx",
      "content": "'use client'\n\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\nimport { cn } from '@/lib/utils'\nimport {\n\tColumnDef,\n\tflexRender,\n\tgetCoreRowModel,\n\tgetFilteredRowModel,\n\tgetSortedRowModel,\n\tSortingState,\n\tuseReactTable,\n} from '@tanstack/react-table'\nimport { useState } from 'react'\n\ninterface DataTableProps<TData, TValue> {\n\tcolumns: ColumnDef<TData, TValue>[]\n\tdata: TData[]\n}\n\nexport function DataTable<TData, TValue>({\n\tcolumns,\n\tdata,\n\tdefaultState,\n}: DataTableProps<TData, TValue> & { defaultState?: Partial<{ sorting: SortingState }> }) {\n\tconst [sorting, setSorting] = useState<SortingState>(defaultState?.sorting ?? [])\n\n\tconst table = useReactTable({\n\t\tdata,\n\t\tcolumns,\n\t\tgetCoreRowModel: getCoreRowModel(),\n\t\tgetFilteredRowModel: getFilteredRowModel(),\n\t\tgetSortedRowModel: getSortedRowModel(),\n\t\tstate: { sorting },\n\t\tonSortingChange: setSorting,\n\t})\n\n\treturn (\n\t\t<Table>\n\t\t\t<TableHeader>\n\t\t\t\t{table.getHeaderGroups().map((headerGroup) => (\n\t\t\t\t\t<TableRow key={headerGroup.id}>\n\t\t\t\t\t\t{headerGroup.headers.map((header) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<TableHead\n\t\t\t\t\t\t\t\t\tkey={header.id}\n\t\t\t\t\t\t\t\t\tclassName={cn((header.column.columnDef.meta as { className?: string })?.className ?? '')}>\n\t\t\t\t\t\t\t\t\t{header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n\t\t\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</TableRow>\n\t\t\t\t))}\n\t\t\t</TableHeader>\n\t\t\t<TableBody>\n\t\t\t\t{table.getRowModel().rows?.length ? (\n\t\t\t\t\ttable.getRowModel().rows.map((row) => (\n\t\t\t\t\t\t<TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>\n\t\t\t\t\t\t\t{row.getVisibleCells().map((cell) => (\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tkey={cell.id}\n\t\t\t\t\t\t\t\t\tclassName={cn((cell.column.columnDef.meta as { className?: string })?.className ?? '')}>\n\t\t\t\t\t\t\t\t\t{flexRender(cell.column.columnDef.cell, cell.getContext())}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t))\n\t\t\t\t) : (\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t<TableCell colSpan={columns.length} className='h-24 text-center'>\n\t\t\t\t\t\t\tNo results.\n\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t</TableRow>\n\t\t\t\t)}\n\t\t\t</TableBody>\n\t\t</Table>\n\t)\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/form-error.tsx",
      "content": "'use client'\n\nimport { useEffect } from 'react'\nimport toast from 'react-hot-toast'\n\nexport function FormError({ hidden = false, value }: { hidden?: boolean; value: string[] | undefined }) {\n\tuseEffect(() => {\n\t\tif (!hidden) return\n\t\tif (value?.length && value.length > 0) toast.error(`FATAL: ${value[0]}`)\n\t}, [hidden, value])\n\n\tif (hidden || !value || !value.length) return null\n\treturn <div className='text-sm text-destructive'>{value[0]}</div>\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/form-input.tsx",
      "content": "import { cn } from '@/lib/utils'\nimport { FormError } from './form-error'\nimport { Input, InputProps } from './ui/input'\nimport { Label } from './ui/label'\n\ntype FormInputProps = InputProps & { error?: string[]; label?: string }\n\nexport function FormInput({ className, error, id, label, name, ...props }: FormInputProps) {\n\treturn (\n\t\t<div className={cn('grid gap-2 h-fit', className)}>\n\t\t\t{label && <Label htmlFor={id ?? name}>{label}</Label>}\n\t\t\t<Input id={id ?? name} name={name ?? id} {...props} />\n\t\t\t<FormError value={error} />\n\t\t</div>\n\t)\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components/global-toaster.tsx",
      "content": "'use client'\n\nimport { usePathname, useRouter, useSearchParams } from 'next/navigation'\nimport { useEffect } from 'react'\nimport toast, { Toaster } from 'react-hot-toast'\n\nexport function GlobalToaster() {\n\tconst pathname = usePathname()\n\tconst router = useRouter()\n\tconst searchParams = useSearchParams()\n\n\tuseEffect(() => {\n\t\tconst message = searchParams.get('message')\n\t\tconst error = searchParams.get('error')\n\t\tconst success = searchParams.get('success')\n\n\t\tif (!message && !error && !success) return\n\t\tconst toastType = message ? toast : success ? toast.success : toast.error\n\t\ttoastType(message ? message : success ? success : error)\n\n\t\tconst newSearchParams = new URLSearchParams(searchParams.toString())\n\t\tconst paramsToRemove = ['message', 'error', 'success']\n\t\tparamsToRemove.forEach((param) => newSearchParams.delete(param))\n\t\tconst redirectPath = `${pathname}?${newSearchParams.toString()}`\n\t\trouter.replace(redirectPath, { scroll: false })\n\t}, [searchParams])\n\n\treturn <Toaster />\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./docker-compose.yml",
      "content": "version: '3.9'\n\nservices:\n    db:\n        image: postgres\n        ports:\n            - '5432:5432'\n        restart: always\n        shm_size: 128mb\n        environment:\n            POSTGRES_USER: postgres\n            POSTGRES_PASSWORD: password\n            POSTGRES_DB: postgres\n",
      "type": "registry:example",
      "target": "~/docker-compose.yml"
    },
    {
      "path": "./lib/auth.ts",
      "content": "import { loginSchema } from '@/validators/auth'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport bcrypt from 'bcryptjs'\nimport NextAuth, { NextAuthConfig } from 'next-auth'\nimport Credentials from 'next-auth/providers/credentials'\nimport Resend from 'next-auth/providers/resend'\nimport { env } from 'process'\nimport prisma from './db'\nimport { AuthUser } from './utils'\n\nexport const authConfig = {\n\tadapter: PrismaAdapter(prisma),\n\tcallbacks: {\n\t\tauthorized: ({ auth, request: { nextUrl } }) => {\n\t\t\tconst allowedPages = ['/forgot', '/login', '/privacy', '/register', '/terms']\n\t\t\tconst isAuthed = !!auth?.user\n\t\t\tconst isAuthRoute = allowedPages.some((page) => nextUrl.pathname.startsWith(page))\n\n\t\t\tif (!isAuthRoute) {\n\t\t\t\tif (isAuthed) return true\n\t\t\t\treturn false\n\t\t\t} else if (isAuthed) return Response.redirect(new URL('/', nextUrl))\n\t\t\treturn true\n\t\t},\n\t},\n\tpages: { signIn: '/login' },\n\tproviders: [\n\t\tCredentials({\n\t\t\tcredentials: { email: {}, password: {} },\n\t\t\tauthorize: async (credentials) => {\n\t\t\t\tconst { email, password } = await loginSchema.parseAsync(credentials)\n\t\t\t\tconst user = await prisma.user.findUnique({ where: { email } })\n\n\t\t\t\tif (!user) throw new Error('User not found')\n\t\t\t\telse if (!user.passwordHash) throw new Error('User does not have a password')\n\t\t\t\telse if (!(await bcrypt.compare(password, user.passwordHash))) throw new Error('Password does not match')\n\n\t\t\t\treturn user\n\t\t\t},\n\t\t}),\n\t\tResend({ from: env.AUTH_RESEND_EMAIL }),\n\t],\n\tsession: { strategy: 'jwt' },\n} satisfies NextAuthConfig\n\nexport const { handlers, auth: session, signIn, signOut } = NextAuth(authConfig)\n\nexport const auth = async (): Promise<AuthUser> => {\n\tconst session = await NextAuth(authConfig).auth()\n\tif (!session?.user) throw new Error('Not authenticated.')\n\n\tconst user = await prisma.user.findFirst({ where: { email: session.user.email ?? '' } })\n\tif (!user) throw new Error('User not found')\n\n\treturn user\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "./lib/constants.ts",
      "content": "import { CommandIcon, HomeIcon, LineChartIcon, LucideIcon, PackageIcon, SettingsIcon, ShoppingCartIcon, Users2Icon } from 'lucide-react'\n\n// TODO: Real app name and icon\nexport const MOCK_APP_ICON = CommandIcon\nexport const MOCK_APP_NAME = 'Acme Inc'\nexport const MOCK_APP_DESC = 'A mock app with authentication'\n\n// TODO: Real nav links\nexport const MOCK_NAV_LINKS: { exact?: boolean; href: string; icon: LucideIcon; label: string }[][] = [\n\t[\n\t\t{ href: '/', exact: true, icon: HomeIcon, label: 'Dashboard' },\n\t\t{ href: '/orders', icon: ShoppingCartIcon, label: 'Orders' },\n\t\t{ href: '/products', icon: PackageIcon, label: 'Products' },\n\t\t{ href: '/customers', icon: Users2Icon, label: 'Customers' },\n\t\t{ href: '/analytics', icon: LineChartIcon, label: 'Analytics' },\n\t],\n\t[{ href: '/settings', icon: SettingsIcon, label: 'Settings' }],\n]\n\n// TODO: Real terms data\nexport const MOCK_TERMS = {\n\tarbitration: 'Arbitration',\n\temail: 'me@example.com',\n\tjurisdiction: 'California',\n\tmailingAddress: '1234 Main St, Anytown, USA',\n\tminimumAge: 13,\n\tphone: '(555) 123-4567',\n}\n\n// TODO: Real testimonial\nexport const MOCK_TESTIMONIAL = {\n\tname: 'Sofia Davis',\n\tquote: 'This library has saved me countless hours of work and helped me deliver stunning designs to my clients faster than ever before.',\n}\n\nexport const PLACEHOLDER_IMAGE = 'https://ui.shadcn.com/placeholder.svg'\n",
      "type": "registry:lib"
    },
    {
      "path": "./lib/db.ts",
      "content": "import { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n\treturn new PrismaClient()\n}\n\ndeclare const globalThis: {\n\tprismaGlobal: ReturnType<typeof prismaClientSingleton>\n} & typeof global\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma\n",
      "type": "registry:lib"
    },
    {
      "path": "./lib/env.ts",
      "content": "import { createEnv } from '@t3-oss/env-nextjs'\nimport { z } from 'zod'\n\nexport const env = createEnv({\n\tserver: {\n\t\tAUTH_SECRET: z.string().min(1),\n\n\t\tAUTH_RESEND_KEY: z.string().min(1),\n\t\tAUTH_RESEND_EMAIL: z.string().email(),\n\n\t\tDATABASE_URL: z.string().url(),\n\t},\n\tclient: { NEXT_PUBLIC_SITE_URL: z.string().url() },\n\truntimeEnv: {\n\t\tAUTH_SECRET: process.env.AUTH_SECRET,\n\n\t\tAUTH_RESEND_KEY: process.env.AUTH_RESEND_KEY,\n\t\tAUTH_RESEND_EMAIL: process.env.AUTH_RESEND_EMAIL,\n\n\t\tDATABASE_URL: process.env.DATABASE_URL,\n\n\t\tNEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,\n\t},\n})\n",
      "type": "registry:lib"
    },
    {
      "path": "./lib/utils.ts",
      "content": "import { Prisma } from '@prisma/client'\nimport { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport type AuthUser = Prisma.UserGetPayload<{}>\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "./mdx-components.tsx",
      "content": "import type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n\treturn {\n\t\t...components,\n\t}\n}\n",
      "type": "registry:example",
      "target": "~/mdx-components.tsx"
    },
    {
      "path": "./middleware.ts",
      "content": "import NextAuth from 'next-auth'\nimport { authConfig } from './lib/auth'\n\nexport default NextAuth(authConfig).auth\nexport const config = {\n\tmatcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n",
      "type": "registry:example",
      "target": "~/middleware.ts"
    },
    {
      "path": "./next.config.mjs",
      "content": "import createMDX from '@next/mdx'\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n\tpageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n}\n\nconst withMDX = createMDX()\nexport default withMDX(nextConfig)\n",
      "type": "registry:example",
      "target": "~/next.config.mjs"
    },
    {
      "path": "./password-auth.json",
      "content": "",
      "type": "registry:example",
      "target": "~/password-auth.json"
    },
    {
      "path": "./prisma/migrations/20241011004353_add_auth/migration.sql",
      "content": "-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n    \"name\" TEXT,\n    \"email\" TEXT NOT NULL,\n    \"image\" TEXT,\n    \"emailVerified\" TIMESTAMP(3),\n    \"passwordHash\" TEXT,\n\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Account\" (\n    \"userId\" TEXT NOT NULL,\n    \"type\" TEXT NOT NULL,\n    \"provider\" TEXT NOT NULL,\n    \"providerAccountId\" TEXT NOT NULL,\n    \"refresh_token\" TEXT,\n    \"access_token\" TEXT,\n    \"expires_at\" INTEGER,\n    \"token_type\" TEXT,\n    \"scope\" TEXT,\n    \"id_token\" TEXT,\n    \"session_state\" TEXT,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"Account_pkey\" PRIMARY KEY (\"provider\",\"providerAccountId\")\n);\n\n-- CreateTable\nCREATE TABLE \"Session\" (\n    \"sessionToken\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"expires\" TIMESTAMP(3) NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL\n);\n\n-- CreateTable\nCREATE TABLE \"VerificationToken\" (\n    \"identifier\" TEXT NOT NULL,\n    \"token\" TEXT NOT NULL,\n    \"expires\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"VerificationToken_pkey\" PRIMARY KEY (\"identifier\",\"token\")\n);\n\n-- CreateTable\nCREATE TABLE \"Authenticator\" (\n    \"credentialID\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"providerAccountId\" TEXT NOT NULL,\n    \"credentialPublicKey\" TEXT NOT NULL,\n    \"counter\" INTEGER NOT NULL,\n    \"credentialDeviceType\" TEXT NOT NULL,\n    \"credentialBackedUp\" BOOLEAN NOT NULL,\n    \"transports\" TEXT,\n\n    CONSTRAINT \"Authenticator_pkey\" PRIMARY KEY (\"userId\",\"credentialID\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Session_sessionToken_key\" ON \"Session\"(\"sessionToken\");\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Authenticator_credentialID_key\" ON \"Authenticator\"(\"credentialID\");\n\n-- AddForeignKey\nALTER TABLE \"Account\" ADD CONSTRAINT \"Account_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Session\" ADD CONSTRAINT \"Session_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"Authenticator\" ADD CONSTRAINT \"Authenticator_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n",
      "type": "registry:example",
      "target": "~/prisma/migrations/20241011004353_add_auth/migration.sql"
    },
    {
      "path": "./prisma/migrations/migration_lock.toml",
      "content": "# Please do not edit this file manually\n# It should be added in your version-control system (i.e. Git)\nprovider = \"postgresql\"",
      "type": "registry:example",
      "target": "~/prisma/migrations/migration_lock.toml"
    },
    {
      "path": "./prisma/schema.prisma",
      "content": "datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id        String   @id @default(cuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  name  String?\n  email String  @unique\n  image String?\n\n  emailVerified DateTime?\n  passwordHash  String?\n\n  accounts      Account[]\n  sessions      Session[]\n  // Optional for WebAuthn support\n  Authenticator Authenticator[]\n}\n\nmodel Account {\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([provider, providerAccountId])\n}\n\nmodel Session {\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String\n  expires    DateTime\n\n  @@id([identifier, token])\n}\n\n// Optional for WebAuthn support\nmodel Authenticator {\n  credentialID         String  @unique\n  userId               String\n  providerAccountId    String\n  credentialPublicKey  String\n  counter              Int\n  credentialDeviceType String\n  credentialBackedUp   Boolean\n  transports           String?\n  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([userId, credentialID])\n}\n",
      "type": "registry:example",
      "target": "~/prisma/schema.prisma"
    },
    {
      "path": "./scripts/seed-db.ts",
      "content": "import { faker } from '@faker-js/faker'\nimport { Prisma, PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nconst NUM_USERS = 5\n\nasync function main() {\n\tawait prisma.user.deleteMany()\n\n\tconst users: Prisma.UserCreateInput[] = new Array(NUM_USERS).fill(null).map(() => {\n\t\tconst firstName = faker.person.firstName()\n\t\tconst lastName = faker.person.lastName()\n\t\treturn { createdAt: faker.date.recent(), name: `${firstName} ${lastName}`, email: faker.internet.email({ firstName, lastName }) }\n\t})\n\n\tawait prisma.user.createMany({ data: users })\n}\n\nmain()\n\t.then(async () => {\n\t\tawait prisma.$disconnect()\n\t})\n\t.catch(async (e) => {\n\t\tconsole.error(e)\n\t\tawait prisma.$disconnect()\n\t\tprocess.exit(1)\n\t})\n",
      "type": "registry:example",
      "target": "~/scripts/seed-db.ts"
    },
    {
      "path": "./tsconfig.json",
      "content": "{\n\t\"compilerOptions\": {\n\t\t\"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n\t\t\"allowJs\": true,\n\t\t\"skipLibCheck\": true,\n\t\t\"strict\": true,\n\t\t\"noEmit\": true,\n\t\t\"esModuleInterop\": true,\n\t\t\"module\": \"esnext\",\n\t\t\"moduleResolution\": \"bundler\",\n\t\t\"resolveJsonModule\": true,\n\t\t\"isolatedModules\": true,\n\t\t\"jsx\": \"preserve\",\n\t\t\"incremental\": true,\n\t\t\"plugins\": [\n\t\t\t{\n\t\t\t\t\"name\": \"next\"\n\t\t\t}\n\t\t],\n\t\t\"paths\": {\n\t\t\t\"@/*\": [\"./*\"]\n\t\t}\n\t},\n\t\"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n\t\"exclude\": [\"node_modules\"],\n\t\"ts-node\": {\n\t\t\"require\": [\"tsconfig-paths/register\"],\n\t\t\"compilerOptions\": {\n\t\t\t\"module\": \"CommonJS\"\n\t\t}\n\t}\n}\n",
      "type": "registry:example",
      "target": "~/tsconfig.json"
    },
    {
      "path": "./validators/auth.ts",
      "content": "import { z } from 'zod'\n\nexport const loginSchema = z.object({\n\temail: z.string({ required_error: 'Email is required' }).min(1, { message: 'Email is required' }).email({ message: 'Invalid email' }),\n\tpassword: z.string({ required_error: 'Password is required' }).min(1, { message: 'Password is required' }),\n})\n\nexport const registerSchema = z\n\t.object({\n\t\tfirstName: z.string({ required_error: 'First name is required' }).min(1, { message: 'First name is required' }),\n\t\tlastName: z.string({ required_error: 'Last name is required' }).min(1, { message: 'Last name is required' }),\n\t\temail: z\n\t\t\t.string({ required_error: 'Email is required' })\n\t\t\t.min(1, { message: 'Email is required' })\n\t\t\t.email({ message: 'Invalid email' }),\n\t\tpassword: z.string({ required_error: 'Password is required' }).min(8, { message: 'Password must be at least 8 characters' }),\n\t\tconfirmPassword: z.string({ required_error: 'Password confirmation is required' }),\n\t})\n\t.refine(({ password, confirmPassword }) => password === confirmPassword, {\n\t\tmessage: 'Passwords do not match',\n\t\tpath: ['confirmPassword'],\n\t})\n\nexport const verifyEmailSchema = z.object({\n\temail: z.string({ required_error: 'Email is required' }).min(1, { message: 'Email is required' }).email({ message: 'Invalid email' }),\n})\n",
      "type": "registry:example",
      "target": "~/validators/auth.ts"
    },
    {
      "path": "./validators/user.ts",
      "content": "import { z } from 'zod'\n\nexport const updateNameSchema = z.object({\n\tname: z.string({ required_error: 'Name is required' }).min(1, { message: 'Name is required' }),\n})\n\nexport const updatePasswordSchema = z\n\t.object({\n\t\tpassword: z.string({ required_error: 'Password is required' }).min(8, { message: 'Password must be at least 8 characters' }),\n\t\tconfirmPassword: z.string({ required_error: 'Password confirmation is required' }),\n\t})\n\t.refine(({ password, confirmPassword }) => password === confirmPassword, {\n\t\tmessage: 'Passwords do not match',\n\t\tpath: ['confirmPassword'],\n\t})\n",
      "type": "registry:example",
      "target": "~/validators/user.ts"
    }
  ],
  "tailwind": {},
  "cssVars": {},
  "meta": {}
}
